# ================== QU·∫¢N L√ù NH√ÇN VI√äN (asm.py) ==================
# Ch·∫°y ƒë∆∞·ª£c b·∫±ng: python asm.py
# Ho·∫∑c import t·ª´ Jupyter: from asm import menu_nhanvien; menu_nhanvien()

import json
from dataclasses import dataclass, asdict
from typing import List, Optional
from pathlib import Path

# --- ƒê·ªãnh v·ªã file d·ªØ li·ªáu (nhanvien.json) c√πng th∆∞ m·ª•c v·ªõi asm.py ho·∫∑c notebook ---
try:
    BASE_DIR = Path(__file__).parent
except NameError:
    # Tr∆∞·ªùng h·ª£p ch·∫°y trong Jupyter, __file__ kh√¥ng c√≥ -> d√πng th∆∞ m·ª•c hi·ªán h√†nh
    BASE_DIR = Path.cwd()
DATA_FILE = BASE_DIR / "nhanvien.json"

# ---------- Model ----------
@dataclass
class NhanVien:
    ma: str
    ho_ten: str
    luong_co_ban: float
    thuong: float = 0.0
    phat: float = 0.0

    @property
    def thu_nhap(self) -> float:
        return self.luong_co_ban + self.thuong - self.phat

# ---------- IO ----------
def load_ds() -> List[NhanVien]:
    if not DATA_FILE.exists():
        return []
    try:
        raw = json.loads(DATA_FILE.read_text(encoding="utf-8"))
        return [NhanVien(**nv) for nv in raw]
    except json.JSONDecodeError:
        print("File d·ªØ li·ªáu h·ªèng/kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Kh·ªüi t·∫°o danh s√°ch r·ªóng.")
        return []

def save_ds(ds: List[NhanVien]) -> None:
    DATA_FILE.write_text(
        json.dumps([asdict(nv) for nv in ds], ensure_ascii=False, indent=2),
        encoding="utf-8"
    )

# ---------- Helpers ----------
def fmt(v: float) -> str:
    return f"{v:,.0f}".replace(",", ".")

def find_by_ma(ds: List[NhanVien], ma: str) -> Optional[NhanVien]:
    for nv in ds:
        if nv.ma.lower() == ma.lower():
            return nv
    return None

def nhap_float(prompt: str) -> float:
    while True:
        s = input(prompt).strip().replace(",", "")
        try:
            return float(s)
        except ValueError:
            print("  ‚ùó Vui l√≤ng nh·∫≠p s·ªë.")

# ---------- Y1 ----------
def y1_nhap_luu(ds: List[NhanVien]) -> None:
    print("\nNh·∫≠p danh s√°ch nh√¢n vi√™n (b·ªè tr·ªëng M√É ƒë·ªÉ k·∫øt th√∫c):")
    while True:
        ma = input("  M√£ NV: ").strip()
        if ma == "":
            break
        if find_by_ma(ds, ma):
            print("  ‚ùó M√£ ƒë√£ t·ªìn t·∫°i, nh·∫≠p m√£ kh√°c.")
            continue
        ho_ten = input("  H·ªç t√™n: ").strip()
        luong = nhap_float("  L∆∞∆°ng c∆° b·∫£n: ")
        thuong = nhap_float("  Th∆∞·ªüng (0 n·∫øu kh√¥ng): ")
        phat = nhap_float("  Ph·∫°t (0 n·∫øu kh√¥ng): ")
        ds.append(NhanVien(ma, ho_ten, luong, thuong, phat))
        print(f"  ‚úÖ ƒê√£ th√™m {ho_ten} (M√£ {ma}).")
    save_ds(ds)
    print("üíæ ƒê√£ l∆∞u v√†o file.")

# ---------- Y2 ----------
def y2_xuat(ds: List[NhanVien]) -> None:
    if not ds:
        print("\nDanh s√°ch r·ªóng.")
        return
    print("\n===== DANH S√ÅCH NH√ÇN VI√äN =====")
    print(f"{'M√É':<10}{'H·ªå T√äN':<28}{'L∆Ø∆†NG':>12}{'TH∆Ø·ªûNG':>12}{'PH·∫†T':>12}{'THU NH·∫¨P':>14}")
    for nv in ds:
        print(f"{nv.ma:<10}{nv.ho_ten:<28}{fmt(nv.luong_co_ban):>12}{fmt(nv.thuong):>12}{fmt(nv.phat):>12}{fmt(nv.thu_nhap):>14}")

# ---------- Y3 ----------
def y3_tim_ma(ds: List[NhanVien]) -> None:
    ma = input("Nh·∫≠p m√£ c·∫ßn t√¨m: ").strip()
    nv = find_by_ma(ds, ma)
    if nv:
        print(f"  ‚úÖ {nv.ma} - {nv.ho_ten} | L∆∞∆°ng: {fmt(nv.luong_co_ban)} | Thu nh·∫≠p: {fmt(nv.thu_nhap)}")
    else:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y.")

# ---------- Y4 ----------
def y4_xoa(ds: List[NhanVien]) -> None:
    ma = input("Nh·∫≠p m√£ c·∫ßn x√≥a: ").strip()
    nv = find_by_ma(ds, ma)
    if not nv:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y.")
        return
    ds.remove(nv)
    save_ds(ds)
    print(f"  üóëÔ∏è ƒê√£ x√≥a {nv.ho_ten} (M√£ {nv.ma}) v√† c·∫≠p nh·∫≠t file.")

# ---------- Y5 ----------
def y5_cap_nhat(ds: List[NhanVien]) -> None:
    ma = input("Nh·∫≠p m√£ c·∫ßn c·∫≠p nh·∫≠t: ").strip()
    nv = find_by_ma(ds, ma)
    if not nv:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y.")
        return
    print("ƒê·ªÉ tr·ªëng n·∫øu mu·ªën gi·ªØ nguy√™n.")
    ho_ten = input(f"  H·ªç t√™n [{nv.ho_ten}]: ").strip() or nv.ho_ten
    s = input(f"  L∆∞∆°ng c∆° b·∫£n [{nv.luong_co_ban}]: ").strip()
    if s != "": nv.luong_co_ban = float(s.replace(",", ""))
    s = input(f"  Th∆∞·ªüng [{nv.thuong}]: ").strip()
    if s != "": nv.thuong = float(s.replace(",", ""))
    s = input(f"  Ph·∫°t [{nv.phat}]: ").strip()
    if s != "": nv.phat = float(s.replace(",", ""))
    nv.ho_ten = ho_ten
    save_ds(ds)
    print("  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t v√† ghi file.")

# ---------- Y6 ----------
def y6_tim_khoang_luong(ds: List[NhanVien]) -> None:
    a = nhap_float("L∆∞∆°ng t·ªëi thi·ªÉu: ")
    b = nhap_float("L∆∞∆°ng t·ªëi ƒëa: ")
    if a > b: a, b = b, a
    kq = [nv for nv in ds if a <= nv.luong_co_ban <= b]
    if not kq:
        print("  ‚ùå Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong kho·∫£ng.")
        return
    print(f"\nNh√¢n vi√™n c√≥ l∆∞∆°ng c∆° b·∫£n trong [{fmt(a)} .. {fmt(b)}]:")
    for nv in kq:
        print(f"  - {nv.ma:<8} {nv.ho_ten:<28} L∆∞∆°ng: {fmt(nv.luong_co_ban)} | Thu nh·∫≠p: {fmt(nv.thu_nhap)}")

# ---------- Y7 ----------
def y7_sort_theo_ho_ten(ds: List[NhanVien]) -> None:
    def key_name(nv: NhanVien):
        parts = nv.ho_ten.strip().split()
        ho = " ".join(parts[:-1]) if len(parts) > 1 else parts[0]
        ten = parts[-1]
        return (ten.lower(), ho.lower())
    ds.sort(key=key_name)
    save_ds(ds)
    print("  ‚úÖ ƒê√£ s·∫Øp x·∫øp theo H·ªå T√äN (v√† l∆∞u file).")

# ---------- Y8 ----------
def y8_sort_thu_nhap(ds: List[NhanVien]) -> None:
    ds.sort(key=lambda nv: nv.thu_nhap)
    save_ds(ds)
    print("  ‚úÖ ƒê√£ s·∫Øp x·∫øp tƒÉng d·∫ßn theo THU NH·∫¨P (v√† l∆∞u file).")

# ---------- Y9 ----------
def y9_top5(ds: List[NhanVien]) -> None:
    if not ds:
        print("Danh s√°ch r·ªóng.")
        return
    top = sorted(ds, key=lambda nv: nv.thu_nhap, reverse=True)[:5]
    print("\nTOP 5 THU NH·∫¨P CAO NH·∫§T:")
    for i, nv in enumerate(top, 1):
        print(f"{i}. {nv.ma:<8} {nv.ho_ten:<28} Thu nh·∫≠p: {fmt(nv.thu_nhap)}")

# ---------- MENU (g·ªçi ƒë∆∞·ª£c t·ª´ file kh√°c) ----------
def menu_nhanvien():
    ds = load_ds()
    while True:
        print("""
======  QU·∫¢N L√ù NH√ÇN VI√äN ======
Y1. Nh·∫≠p & l∆∞u danh s√°ch
Y2. ƒê·ªçc & xu·∫•t danh s√°ch
Y3. T√¨m theo M√É
Y4. X√≥a theo M√É (c·∫≠p nh·∫≠t file)
Y5. C·∫≠p nh·∫≠t theo M√É (ghi file)
Y6. T√¨m theo KHO·∫¢NG L∆Ø∆†NG C∆† B·∫¢N
Y7. S·∫Øp x·∫øp theo H·ªå T√äN
Y8. S·∫Øp x·∫øp theo THU NH·∫¨P
Y9. Top 5 THU NH·∫¨P cao nh·∫•t
q. Tho√°t
""")
        ccc = input("Ch·ªçn ch·ª©c nƒÉng: ").strip().lower()
        if ccc == "q":
            print("T·∫°m bi·ªát!")
            break
        match ccc:
            case "y1": y1_nhap_luu(ds)
            case "y2": y2_xuat(ds)
            case "y3": y3_tim_ma(ds)
            case "y4": y4_xoa(ds)
            case "y5": y5_cap_nhat(ds)
            case "y6": y6_tim_khoang_luong(ds)
            case "y7": y7_sort_theo_ho_ten(ds)
            case "y8": y8_sort_thu_nhap(ds)
            case "y9": y9_top5(ds)
            case _:    print("‚ùó Ch·ªçn Y1..Y9 ho·∫∑c q ƒë·ªÉ tho√°t.")

# Cho ph√©p ch·∫°y tr·ª±c ti·∫øp file asm.py
if __name__ == "__main__":
    menu_nhanvien()
